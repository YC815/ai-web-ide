# AI Web IDE Docker Compose 配置
# 管理前端、後端、CI Runner 等多個容器服務

version: '3.8'

services:
  # 前端 AI Web IDE 服務
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ai-web-ide-frontend
    ports:
      - "3000:3000"
    # The 'volumes' section has been removed to ensure AI file operations are isolated
    # within the container and do not affect the host file system.
    # To re-enable hot-reloading for development, you can add the 'volumes' section back,
    # for example by using a local docker-compose.override.yml file.
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true  # 支援文件監控
    networks:
      - ai-ide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 服務 (會話管理和快取)
  redis:
    image: redis:7-alpine
    container_name: ai-web-ide-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-ide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL 資料庫 (專案數據和歷史記錄)
  postgres:
    image: postgres:15-alpine
    container_name: ai-web-ide-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=ai_web_ide
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ai_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    networks:
      - ai-ide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_web_ide"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CI/CD Runner (用於自動部署)
  ci-runner:
    image: node:18-alpine
    container_name: ai-web-ide-ci-runner
    volumes:
      - ./ci:/app
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    environment:
      - NODE_ENV=production
      - DOCKER_HOST=unix:///var/run/docker.sock
    networks:
      - ai-ide-network
    restart: unless-stopped
    command: ["tail", "-f", "/dev/null"]  # 保持容器運行

  # Nginx 反向代理 (生產環境使用)
  nginx:
    image: nginx:alpine
    container_name: ai-web-ide-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - ai-ide-network
    depends_on:
      - frontend
    restart: unless-stopped
    profiles:
      - production  # 只在生產環境啟用

# 網路配置
networks:
  ai-ide-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 資料卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local

# 開發環境快速啟動配置
# 使用方式:
# 開發環境: docker-compose up -d
# 生產環境: docker-compose --profile production up -d
# 僅前端: docker-compose up frontend
# 停止所有: docker-compose down
# 清理數據: docker-compose down -v